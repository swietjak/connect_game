{"version":3,"sources":["check.js","dimentions.js","App.js","serviceWorker.js","index.js"],"names":["funcArr","checkVertical","gameArray","playerNum","col","row","i","rightEnd","leftEnd","winArr","push","checkDiagonalUp","checkDiagonalDown","checkHorizontal","module","exports","returnDimentions","width","check","require","dimentions","TogglePlayDisp","ToggleDisp","event","props","toggleDisp","gameOverMessage","this","winner","className","onClick","React","Component","App","baseArray","Array","fill","forEach","elem","j","setState","state","showPlayDisp","updateWindowDimensions","console","log","window","innerWidth","innerHeight","windowWidth","windowHeight","FillCell","svgDimentions","height","key","cx","cy","r","stroke","colors","strokeWidth","AddCircleToRow","gameArr","errorMessage","CheckForWinning","checkFunctions","a","length","GameEnd","isGameWon","checkArr","cols","map","index","class","e","color","addEventListener","removeEventListener","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"2KAAA,IAoFIA,EAAU,CACZC,cArFkB,SAACC,EAAWC,EAAWC,EAAKC,GAK9C,IAJA,IAAIC,EAAI,EACJC,GAAW,EACXC,GAAU,EACVC,EAAS,CAAC,CAACL,EAAKC,IACbC,EAAI,IACJE,GAAWH,EAAMC,EAAI,GAAKJ,EAAUE,GAAKC,EAAMC,GAAG,KAAOH,EAC5DM,EAAOC,KAAK,CAACN,EAAKC,EAAMC,IACnBE,GAAU,GACZD,GAAYF,EAAMC,GAAK,GAAKJ,EAAUE,GAAKC,EAAMC,GAAG,KAAOH,EAC9DM,EAAOC,KAAK,CAACN,EAAKC,EAAMC,IACnBC,GAAW,EAClBD,IAEF,OAAOG,GAwEPE,gBA5BoB,SAACT,EAAWC,EAAWC,EAAKC,GAKhD,IAJA,IACIE,EADAD,EAAI,EAENE,GAAU,EACRC,EAAS,CAAC,CAACL,EAAKC,IACbC,EAAI,IAENE,GACDJ,EAAME,EAAI,GACVD,EAAMC,GAAK,GACXJ,EAAUE,EAAME,GAAGD,EAAMC,GAAG,KAAOH,EAEnCM,EAAOC,KAAK,CAACN,EAAME,EAAGD,EAAMC,IACvBE,GAAU,GAEdD,GACDH,EAAME,GAAK,GACXD,EAAMC,EAAI,GACVJ,EAAUE,EAAME,GAAGD,EAAMC,GAAG,KAAOH,EAEnCM,EAAOC,KAAK,CAACN,EAAME,EAAGD,EAAMC,IACvBC,GAAW,EAClBD,IAEF,OAAOG,GAKPG,kBAvDsB,SAACV,EAAWC,EAAWC,EAAKC,GAKlD,IAJA,IAAIC,EAAI,EACJC,GAAW,EACXC,GAAU,EACVC,EAAS,CAAC,CAACL,EAAKC,IACbC,EAAI,IAENE,GACDJ,EAAME,EAAI,GACVD,EAAMC,EAAI,GACVJ,EAAUE,EAAME,GAAGD,EAAMC,GAAG,KAAOH,EAEnCM,EAAOC,KAAK,CAACN,EAAME,EAAGD,EAAMC,IACvBE,GAAU,GAEdD,GACDH,EAAME,GAAK,GACXD,EAAMC,GAAK,GACXJ,EAAUE,EAAME,GAAGD,EAAMC,GAAG,KAAOH,EAEnCM,EAAOC,KAAK,CAACN,EAAME,EAAGD,EAAMC,IACvBC,GAAW,EAClBD,IAEF,OAAOG,GAgCPI,gBAxEoB,SAACX,EAAWC,EAAWC,EAAKC,GAKhD,IAJA,IAAIC,EAAI,EACJC,GAAW,EACXC,GAAU,EACVC,EAAS,CAAC,CAACL,EAAKC,IACbC,EAAI,IACJE,GAAWJ,EAAME,EAAI,GAAKJ,EAAUE,EAAME,GAAGD,GAAK,KAAOF,EAC5DM,EAAOC,KAAK,CAACN,EAAME,EAAGD,IACjBG,GAAU,GACZD,GAAYH,EAAME,GAAK,GAAKJ,EAAUE,EAAME,GAAGD,GAAK,KAAOF,EAC9DM,EAAOC,KAAK,CAACN,EAAME,EAAGD,IACjBE,GAAW,EAClBD,IAEF,OAAOG,IA4DTK,EAAOC,QAAUf,G,cC1FjB,IAQIA,EAAU,CACZgB,iBATqB,SAAAC,GACrB,OAAIA,EAAQ,IAAY,CAAC,OAAQ,OAAQ,SAAU,UAC1CA,EAAQ,KAAOA,EAAQ,IACvB,CAAC,OAAQ,OAAQ,SAAU,UAC3BA,EAAQ,KAAOA,EAAQ,IACvB,CAAC,OAAQ,OAAQ,SAAU,UACxB,CAAC,SAAU,UAAW,SAAU,YAK9CH,EAAOC,QAAUf,G,4GCRXkB,G,MAAQC,EAAQ,KAChBC,EAAaD,EAAQ,IAErBE,E,4MAWJC,WAAa,SAAAC,GACX,EAAKC,MAAMC,WAAWF,I,uDAVtB,IAAIG,EACoB,KAAtBC,KAAKH,MAAMI,OAAgB,GAAKD,KAAKH,MAAMI,OAAS,WACtD,OACE,yBAAKC,UAAU,aACb,uBAAGA,UAAU,YAAYH,GACzB,4BAAQI,QAASH,KAAKL,YAAtB,a,GAPqBS,IAAMC,WAkMpBC,E,kDAjLb,WAAYT,GAAQ,IAAD,uBACjB,cAAMA,IAgERF,WAAa,SAAAC,GACX,IAAIW,EAAY,IAAIC,MAAM,GAC1BD,EAAUE,KAAK,GACfF,EAAUG,SAAQ,SAACC,EAAMhC,GACvB4B,EAAU5B,GAAK,IAAI6B,MAAM,GACzBD,EAAU5B,GAAG8B,KAAK,GAClBF,EAAU5B,GAAG+B,SAAQ,SAACC,EAAMC,GAC1BL,EAAU5B,GAAGiC,GAAK,CAAC,EAAG,SAG1B,EAAKC,UAAS,SAAAC,GAAK,MAAK,CACtBC,cAAeD,EAAMC,aACrBxC,UAAWgC,OA7EI,EA0FnBS,uBAAyB,WACvBC,QAAQC,IAAIC,OAAOC,WAAYD,OAAOE,aACtC,EAAKR,SAAS,CACZS,YAAaH,OAAOC,WACpBG,aAAcJ,OAAOE,eA9FN,EAkGnBG,SAAW,SAACb,EAAMlC,GAChB,IAAIgD,EAAgBhC,EAAWJ,iBAAiB,EAAKyB,MAAMQ,aAC3D,OACE,yBAAKhC,MAAOmC,EAAc,GAAIC,OAAQD,EAAc,IAClD,4BACEE,IAAKlD,EACLmD,GAAIH,EAAc,GAClBI,GAAIJ,EAAc,GAClBK,EAAGL,EAAc,GACjBM,OAAQ,EAAKC,OAAOrB,EAAK,IACzBsB,YAAaR,EAAc,GAC3BhB,KAAM,EAAKuB,OAAOrB,EAAK,QA7GZ,EAmHnBuB,eAAiB,SAACtC,EAAOnB,GACvB,IAAI0D,EAAU,EAAKrB,MAAMvC,UACrBI,EAAI,EACR,GAA2B,IAAvBwD,EAAQ1D,GAAKE,GAAG,GAApB,CAOA,KAAOwD,EAAQ1D,KAAOE,IAA6B,IAAvBwD,EAAQ1D,GAAKE,GAAG,KAE5CwD,EAAQ1D,GAAKE,EAAI,GAAG,GAAK,EAAKmC,MAAMtC,UACpC,EAAKqC,UACH,SAAAC,GAAK,MAAK,CACRvC,UAAW4D,EACX3D,UAA+B,IAApBsC,EAAMtC,UAAkB,EAAI,EACvC4D,aAAc,MAEhB,EAAKC,gBAAgB5D,EAAKE,EAAI,SAf9B,EAAKkC,SAAS,CACZuB,aAAc,gCAxHD,EA0InBC,gBAAkB,SAAC5D,EAAKC,GACtB,IAAIF,EAAY,EAAKsC,MAAMtC,UACvB2D,EAAU,EAAKrB,MAAMvC,UACzB,EAAK+D,eAAiB,CACpB,WACE,OAAO/C,EAAML,gBAAgBiD,EAAS3D,EAAWC,EAAKC,IAExD,WACE,OAAOa,EAAMjB,cAAc6D,EAAS3D,EAAWC,EAAKC,IAEtD,WACE,OAAOa,EAAMN,kBAAkBkD,EAAS3D,EAAWC,EAAKC,IAE1D,WACE,OAAOa,EAAMP,gBAAgBmD,EAAS3D,EAAWC,EAAKC,KAG1D,EAAK4D,eAAe5B,SAAQ,SAAAC,GAC1B,IAAI4B,EAAI5B,IACJ4B,EAAEC,QAAU,GACd,EAAKC,QAAQF,OA9JA,EAmKnBE,QAAU,SAAAF,GACR,IAAIJ,EAAU,EAAKrB,MAAMvC,UACzBgE,EAAE7B,SAAQ,SAAAC,GACRwB,EAAQxB,EAAK,IAAIA,EAAK,IAAI,GAAK,KAEjC,EAAKE,UAAS,SAAAC,GAAK,MAAK,CACtBvC,UAAW4D,EACXO,WAAW,EACX3B,cAAc,EACdvC,UAA+B,IAApBsC,EAAMtC,UAAkB,EAAI,OA1KzC,IAAI+B,EAAY,IAAIC,MAAM,GAFT,OAGjBD,EAAUE,KAAK,GACfF,EAAUG,SAAQ,SAACC,EAAMhC,GACvB4B,EAAU5B,GAAK,IAAI6B,MAAM,GACzBD,EAAU5B,GAAG8B,KAAK,GAClBF,EAAU5B,GAAG+B,SAAQ,SAACC,EAAMC,GAC1BL,EAAU5B,GAAGiC,GAAK,CAAC,EAAG,SAI1B,EAAKoB,OAAS,CAAC,QAAS,QAAS,MAAO,UACxC,EAAKW,SAAW,GAChB,EAAKL,eAAiB,GACtB,EAAKxB,MAAQ,CACXvC,UAAWgC,EACX/B,UAAW,EACX4D,aAAc,GACdrB,cAAc,EACd2B,WAAW,EACXpB,YAAaH,OAAOC,WACpBG,aAAcJ,OAAOE,aAtBN,E,qDAyBT,IAAD,OACHuB,EAAO5C,KAAKc,MAAMvC,UAAUsE,KAAI,SAACnE,EAAKoE,GACxC,OACE,yBACEC,MAAM,WACNpB,IAAKmB,EACL3C,QAAS,SAAA6C,GAAC,OAAI,EAAKd,eAAec,EAAGF,KAEpCpE,EAAImE,KAAI,SAAClC,EAAMhC,GACd,OACE,yBAAKoE,MAAM,YAAYpB,IAAKhD,GACzB,EAAK6C,SAASb,EAAMmC,WAOjC,OACE,yBAAKC,MAAM,OACR/C,KAAKc,MAAMC,cACV,kBAAC,EAAD,CACEjB,WAAYE,KAAKL,WACjBM,OACED,KAAKc,MAAM4B,UAAY1C,KAAKgC,OAAOhC,KAAKc,MAAMtC,WAAa,MAI/DwB,KAAKc,MAAMC,cACX,yBAAKgC,MAAM,cAAcE,MAAOjD,KAAKgC,OAAOhC,KAAKc,MAAMtC,YAAvD,iBACiBwB,KAAKgC,OAAOhC,KAAKc,MAAMtC,YAI1C,yBAAKuE,MAAM,gBAAgBH,GAE3B,yBAAKG,MAAM,gBAAgB/C,KAAKc,MAAMsB,iB,0CAqB1CpC,KAAKgB,yBACLG,OAAO+B,iBAAiB,SAAUlD,KAAKgB,0B,6CAIvCG,OAAOgC,oBAAoB,SAAUnD,KAAKgB,4B,GAxF5BZ,IAAMC,WCVJ+C,QACW,cAA7BjC,OAAOkC,SAASC,UAEe,UAA7BnC,OAAOkC,SAASC,UAEhBnC,OAAOkC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLnD,QAAQmD,MAAMA,EAAMC,c","file":"static/js/main.fa6388f0.chunk.js","sourcesContent":["let checkVertical = (gameArray, playerNum, col, row) => {\r\n  let i = 1;\r\n  let rightEnd = false;\r\n  let leftEnd = false;\r\n  let winArr = [[col, row]];\r\n  while (i < 7) {\r\n    if (!leftEnd && row + i < 7 && gameArray[col][row + i][0] === playerNum) {\r\n      winArr.push([col, row + i]);\r\n    } else leftEnd = true;\r\n    if (!rightEnd && row - i >= 0 && gameArray[col][row - i][0] === playerNum) {\r\n      winArr.push([col, row - i]);\r\n    } else rightEnd = true;\r\n    i++;\r\n  }\r\n  return winArr;\r\n};\r\nlet checkHorizontal = (gameArray, playerNum, col, row) => {\r\n  let i = 1;\r\n  let rightEnd = false;\r\n  let leftEnd = false;\r\n  let winArr = [[col, row]];\r\n  while (i < 7) {\r\n    if (!leftEnd && col + i < 7 && gameArray[col + i][row][0] === playerNum) {\r\n      winArr.push([col + i, row]);\r\n    } else leftEnd = true;\r\n    if (!rightEnd && col - i >= 0 && gameArray[col - i][row][0] === playerNum) {\r\n      winArr.push([col - i, row]);\r\n    } else rightEnd = true;\r\n    i++;\r\n  }\r\n  return winArr;\r\n};\r\nlet checkDiagonalDown = (gameArray, playerNum, col, row) => {\r\n  let i = 1;\r\n  let rightEnd = false;\r\n  let leftEnd = false;\r\n  let winArr = [[col, row]];\r\n  while (i < 7) {\r\n    if (\r\n      !leftEnd &&\r\n      col + i < 7 &&\r\n      row + i < 7 &&\r\n      gameArray[col + i][row + i][0] === playerNum\r\n    ) {\r\n      winArr.push([col + i, row + i]);\r\n    } else leftEnd = true;\r\n    if (\r\n      !rightEnd &&\r\n      col - i >= 0 &&\r\n      row - i >= 0 &&\r\n      gameArray[col - i][row - i][0] === playerNum\r\n    ) {\r\n      winArr.push([col - i, row - i]);\r\n    } else rightEnd = true;\r\n    i++;\r\n  }\r\n  return winArr;\r\n};\r\nlet checkDiagonalUp = (gameArray, playerNum, col, row) => {\r\n  let i = 1;\r\n  let rightEnd,\r\n    leftEnd = false;\r\n  let winArr = [[col, row]];\r\n  while (i < 7) {\r\n    if (\r\n      !leftEnd &&\r\n      col + i < 7 &&\r\n      row - i >= 0 &&\r\n      gameArray[col + i][row - i][0] === playerNum\r\n    ) {\r\n      winArr.push([col + i, row - i]);\r\n    } else leftEnd = true;\r\n    if (\r\n      !rightEnd &&\r\n      col - i >= 0 &&\r\n      row + i < 7 &&\r\n      gameArray[col - i][row + i][0] === playerNum\r\n    ) {\r\n      winArr.push([col - i, row + i]);\r\n    } else rightEnd = true;\r\n    i++;\r\n  }\r\n  return winArr;\r\n};\r\nlet funcArr = {\r\n  checkVertical,\r\n  checkDiagonalUp,\r\n  checkDiagonalDown,\r\n  checkHorizontal\r\n};\r\nmodule.exports = funcArr;\r\n","let returnDimentions = width => {\r\n  if (width > 840) return [\"6rem\", \"3rem\", \"2.5rem\", \"0.4rem\"];\r\n  else if (width > 560 && width < 840)\r\n    return [\"4rem\", \"2rem\", \"1.7rem\", \"0.3rem\"];\r\n  else if (width > 282 && width < 560)\r\n    return [\"2rem\", \"1rem\", \"0.8rem\", \"0.2rem\"];\r\n  else return [\"1.5rem\", \"0.75rem\", \"0.6rem\", \"0.1rem\"];\r\n};\r\nlet funcArr = {\r\n  returnDimentions\r\n};\r\nmodule.exports = funcArr;\r\n","import React from \"react\";\n//import logo from \"./logo.svg\";\nimport \"./App.css\";\nconst check = require(\"./check\");\nconst dimentions = require(\"./dimentions\");\n\nclass TogglePlayDisp extends React.Component {\n  render() {\n    let gameOverMessage =\n      this.props.winner === \"\" ? \"\" : this.props.winner + \" has won\";\n    return (\n      <div className=\"play_disp\">\n        <p className=\"win_disp\">{gameOverMessage}</p>\n        <button onClick={this.ToggleDisp}>Play</button>\n      </div>\n    );\n  }\n  ToggleDisp = event => {\n    this.props.toggleDisp(event);\n  };\n}\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    let baseArray = new Array(7);\n    baseArray.fill(0);\n    baseArray.forEach((elem, i) => {\n      baseArray[i] = new Array(7);\n      baseArray[i].fill(0);\n      baseArray[i].forEach((elem, j) => {\n        baseArray[i][j] = [0, 1];\n      });\n    });\n\n    this.colors = [\"white\", \"black\", \"red\", \"yellow\"];\n    this.checkArr = [];\n    this.checkFunctions = [];\n    this.state = {\n      gameArray: baseArray,\n      playerNum: 1,\n      errorMessage: \"\",\n      showPlayDisp: true,\n      isGameWon: false,\n      windowWidth: window.innerWidth,\n      windowHeight: window.innerHeight\n    };\n  }\n  render() {\n    let cols = this.state.gameArray.map((row, index) => {\n      return (\n        <div\n          class=\"game_row\"\n          key={index}\n          onClick={e => this.AddCircleToRow(e, index)}\n        >\n          {row.map((elem, i) => {\n            return (\n              <div class=\"game_cell\" key={i}>\n                {this.FillCell(elem, index)}\n              </div>\n            );\n          })}\n        </div>\n      );\n    });\n    return (\n      <div class=\"App\">\n        {this.state.showPlayDisp && (\n          <TogglePlayDisp\n            toggleDisp={this.ToggleDisp}\n            winner={\n              this.state.isGameWon ? this.colors[this.state.playerNum] : \"\"\n            }\n          />\n        )}\n        {!this.state.showPlayDisp && (\n          <div class=\"player_disp\" color={this.colors[this.state.playerNum]}>\n            Player color: {this.colors[this.state.playerNum]}\n          </div>\n        )}\n\n        <div class=\"game_display\">{cols}</div>\n\n        <div class=\"errr_display\">{this.state.errorMessage}</div>\n      </div>\n    );\n  }\n  ToggleDisp = event => {\n    let baseArray = new Array(7);\n    baseArray.fill(0);\n    baseArray.forEach((elem, i) => {\n      baseArray[i] = new Array(7);\n      baseArray[i].fill(0);\n      baseArray[i].forEach((elem, j) => {\n        baseArray[i][j] = [0, 1];\n      });\n    });\n    this.setState(state => ({\n      showPlayDisp: !state.showPlayDisp,\n      gameArray: baseArray\n    }));\n  };\n\n  componentDidMount() {\n    this.updateWindowDimensions();\n    window.addEventListener(\"resize\", this.updateWindowDimensions);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\"resize\", this.updateWindowDimensions);\n  }\n\n  updateWindowDimensions = () => {\n    console.log(window.innerWidth, window.innerHeight);\n    this.setState({\n      windowWidth: window.innerWidth,\n      windowHeight: window.innerHeight\n    });\n  };\n\n  FillCell = (elem, col) => {\n    let svgDimentions = dimentions.returnDimentions(this.state.windowWidth);\n    return (\n      <svg width={svgDimentions[0]} height={svgDimentions[0]}>\n        <circle\n          key={col}\n          cx={svgDimentions[1]}\n          cy={svgDimentions[1]}\n          r={svgDimentions[2]}\n          stroke={this.colors[elem[1]]}\n          strokeWidth={svgDimentions[3]}\n          fill={this.colors[elem[0]]}\n        />\n      </svg>\n    );\n  };\n\n  AddCircleToRow = (event, col) => {\n    let gameArr = this.state.gameArray;\n    let i = 0;\n    if (gameArr[col][i][0] !== 0) {\n      this.setState({\n        errorMessage: \"The column is full already\"\n      });\n      return;\n    }\n\n    while (gameArr[col][++i] && gameArr[col][i][0] === 0) {}\n\n    gameArr[col][i - 1][0] = this.state.playerNum;\n    this.setState(\n      state => ({\n        gameArray: gameArr,\n        playerNum: state.playerNum === 1 ? 2 : 1,\n        errorMessage: \"\"\n      }),\n      this.CheckForWinning(col, i - 1)\n    );\n  };\n\n  CheckForWinning = (col, row) => {\n    let playerNum = this.state.playerNum;\n    let gameArr = this.state.gameArray;\n    this.checkFunctions = [\n      function() {\n        return check.checkHorizontal(gameArr, playerNum, col, row);\n      },\n      function() {\n        return check.checkVertical(gameArr, playerNum, col, row);\n      },\n      function() {\n        return check.checkDiagonalDown(gameArr, playerNum, col, row);\n      },\n      function() {\n        return check.checkDiagonalUp(gameArr, playerNum, col, row);\n      }\n    ];\n    this.checkFunctions.forEach(elem => {\n      let a = elem();\n      if (a.length >= 4) {\n        this.GameEnd(a);\n        return;\n      }\n    });\n  };\n  GameEnd = a => {\n    let gameArr = this.state.gameArray;\n    a.forEach(elem => {\n      gameArr[elem[0]][elem[1]][1] = 3;\n    });\n    this.setState(state => ({\n      gameArray: gameArr,\n      isGameWon: true,\n      showPlayDisp: true,\n      playerNum: state.playerNum === 1 ? 2 : 1\n    }));\n  };\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}